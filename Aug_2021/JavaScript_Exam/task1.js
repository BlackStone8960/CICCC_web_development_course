// Result will be generated by inputting an argument in command line

const factorialize = (num) => {
  let factorializedNum = 1;
  for (let i = 1; i <= num; i++) {
    factorializedNum *= i;
  }
  return factorializedNum;
};

const countCombination = (str) => {
  let charObj = {};
  let result = factorialize(str.length)

  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    Object.keys(charObj).includes(char) ? charObj[char]++ : charObj[char] = 1;
  }

  for (const prop in charObj) {
    result /= factorialize(charObj[prop]);
  }

  return result;
};

const combString = (str) => {
  const lenStr = str.length;
  let result = [];
  let indexCurrent = 0;
  let total = 0;

  if (lenStr <= 0 || lenStr >= 7) return "Input string consists of 1 ~ 7 characters as an argument in command line.";

  while (indexCurrent < lenStr) {
    const char = str.charAt(indexCurrent);
    const arrTemp = [char];

    for (let x in result) {
      arrTemp.push("" + result[x] + char);
    }
    result = result.concat(arrTemp);

    indexCurrent++;
  }

  const uniqueResult = [...new Set(result)]; // Delete duplicates

  uniqueResult.forEach(str => {
    total += countCombination(str);
  })
  return total;
}

console.log(combString(process.argv[2] || ""));